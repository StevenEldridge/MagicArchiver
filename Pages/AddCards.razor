@page "/addcards"

@using MagicArchiver.Services
@using MagicArchiver.Models
@using FluentResults

@inject NavigationManager Navigation
@inject IGlobalState      GlobalState
@inject IPocketBase       PocketBase
@inject ILogger<AddCards> Logger


<!-- Sidebar -->
<div class="nav-scrollable sidebar py-4">
  <div class="nav-item my-2 px-3">
    <a
      class    = "btn @(NavMenuActive(AddCardMethod.SetAbr))"
      @onclick = "@(() => cardMethod = AddCardMethod.SetAbr)"
    >
      Set Abbr
    </a>
  </div>
  <div class="nav-item my-2 px-3">
    <a
      class    = "btn @(NavMenuActive(AddCardMethod.SetSize))"
      @onclick = "@(() => cardMethod = AddCardMethod.SetSize)"
    >
      Set Size
    </a>
  </div>
  <div class="nav-item my-2 px-3">
    <a
      class    = "btn @(NavMenuActive(AddCardMethod.CardName))"
      @onclick = "@(() => cardMethod = AddCardMethod.CardName)"
    >
      Card Name
    </a>
  </div>
</div>

<!-- Page Content -->
<div class="page-content">
  <div
    class="text-center m-5"
    @onkeydown="HandleKeyDown">
    @if (cardMethod == AddCardMethod.CardName) {
      <h2>Add By Card Name</h2>
      <p>
        Add a card by the set number followed by the first three characters of the card name.
        Example: to add Demonic Tutor from the Ultimate Masters set type "093dem". Hit "Enter" to
        add the card or hit "Alt" to add the card as a foil.
      </p>
    }
    else if (cardMethod == AddCardMethod.SetAbr) {
      <h2>Add By Set Abbreviation</h2>
      <p>
        Add a card by the set number followed by the set abbreviation code. Example: to add Demonic
        Tutor from the Ultimate Masters set type "093uma". Hit "Enter" to add the card or hit "Alt" to
        add the card as a foil.
      </p>
    }
    else {
      <h2>Add By Set Size</h2>
      <p>
        Add a card by the set number followed by the total cards in the set. Example: to add Demonic
        Tutor from the Ultimate Masters set type "093254". Hit "Enter" to add the card or hit "Alt" to
        add the card as a foil.
      </p>
    }
    <div
      class="mx-auto"
      style="max-width: 400px; width: 80%">
      <div class="input-group mb-3">
        <span
          class="input-group-text"
          style="width: 100px">
          Card Id
        </span>
        <input
          type        = "text"
          class       = "form-control"
          placeholder = "@GetInputPlaceHolder()"
          @bind       = "cardId"
          @bind:event = "oninput"
        />
      </div>
    </div>
    @if (error != null) {
      <div
        class = "alert alert-warning mt-3"
        role  = "alert"
      >
        @error
      </div>
    }
  </div>
</div>


@code {
  private string        cardId          = "";
  private AddCardMethod cardMethod      = AddCardMethod.SetAbr;
  private bool          collapseNavMenu = false;
  private string?       error           = null;
  
  private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

  private string NavMenuActive(AddCardMethod method) {
    return method == cardMethod ? "active" : "";
  }

  private void SetCardMethod(AddCardMethod method) {
    cardMethod = method;
  }

  private void ToggleNavMenu() {
    collapseNavMenu = !collapseNavMenu;
  }

  private async Task HandleKeyDown(KeyboardEventArgs e) {
    if (e.Key == "Enter") {
      await AddCard(false);
    }
    else if (e.Key == "Alt") { 
      await AddCard(true);
    }
  }

  private async Task AddCard(bool isFoil) {
    switch (cardMethod) {
      case AddCardMethod.CardName:
        Result<Models.Collection> nameResult = await PocketBase.AddCardByCardName(cardId, isFoil);
        if (nameResult.IsSuccess) {
          Console.WriteLine(nameResult.Value.ToString());
        }
        else {
          error = nameResult.Errors[0].ToString();
        }
        break;
      case AddCardMethod.SetAbr:
        Result<Models.Collection> abrResult = await PocketBase.AddCardBySetAbr(cardId, isFoil);
        if (abrResult.IsSuccess) {
          Console.WriteLine(abrResult.Value.ToString());
        }
        else {
          error = abrResult.Errors[0].ToString();
        }
        break;
      case AddCardMethod.SetSize:
        Result<Models.Collection> sizeResult = await PocketBase.AddCardBySetSize(cardId, isFoil);
        if (sizeResult.IsSuccess) {
          Console.WriteLine(sizeResult.Value.ToString());
        }
        else {
          error = sizeResult.Errors[0].ToString();
        }
        break;
      default:
        Logger.LogError("ERROR: Default Triggered");
        break;
    }
  }

  private string GetInputPlaceHolder() {
    switch (cardMethod) {
      case AddCardMethod.CardName:
        return "093dem";
      case AddCardMethod.SetAbr:
        return "093uma";
      case AddCardMethod.SetSize:
        return "093254";
      default:
        Logger.LogError("ERROR: Default Triggered");
        return "";
    }
  }
  
  protected override void OnInitialized() {
    // Navigates the user to the login screen if they aren't authenticated
    if (GlobalState.GetLoginDetails() == null) {
      Navigation.NavigateTo("login");
    }
  }
}


