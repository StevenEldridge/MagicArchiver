@page "/login"
@using MagicArchiver.Pages.Services
@using MagicArchiver.Models
@using System.Text.Json

@inject NavigationManager Navigation
@inject IPocketBase       PocketBase
@inject IGlobalState      GlobalState

<div class="text-center">
    <h1>Login</h1>
    <div
        class = "mx-auto"
        style = "max-width: 400px; width: 80%"
    >
        <div class="input-group mb-3">
            <span
                class = "input-group-text"
                style = "width: 100px"
            >
                Username
            </span>
            <input
                type        = "text"
                class       = "form-control"
                placeholder = "Chandra4"
                @bind       = "username"
            />
        </div>
        <div class="input-group mb-1">
            <span
                class = "input-group-text"
                style = "width: 100px"
            >
                Password
            </span>
            <input
                type        = "text"
                class       = "form-control"
                placeholder = "badPass123"
                @bind       = "password"
            />
        </div>
        <div 
            class = "text-start mb-3"
            style = "font-size: 0.85em"
        >
            New?
            <a href="createaccount">
                Create an Account
            </a>
        </div>
        <div>
            <button
                type     = "button"
                class    = "btn btn-primary"
                @onclick = "LoginUser"
            >
                Login
            </button>
        </div>
    </div>
    @if (error != null) {
        <div
            class = "alert alert-warning mt-3"
            role  = "alert"
        >
            @error
        </div>
    }
</div>


@code {
    string  username = "";
    string  password = "";
    string? error    = null;
    
    
    async private void LoginUser() {
        HttpResponseMessage response = await PocketBase.Login(
            username,
            password
        );

        string responseBody = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode) {
            Console.WriteLine(responseBody);
            string token = JsonSerializer.Deserialize<LoginResponse>(responseBody).token;
            GlobalState.SetToken(token);
            Navigation.NavigateTo("collection");
        }
        else {
            Console.WriteLine("ERROR");
            error = responseBody;
            StateHasChanged();
        }
    }
}